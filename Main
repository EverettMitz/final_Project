    //Draw whole bitmoji
var drawBitmojiMitkowski = function (bodyX, bodyY, bodySize){
    
    var drawHead = function(bodyX, bodyY, bodySize){
        var e = bodySize/100;
        //HOOD
        noStroke();
        fill(33,44,40);
        ellipse(e*75+bodyX,e*83+bodyY,e*50,e*26);
        
        //NECK
        fill(222, 195, 169);//neck color
        ellipse(e*75+bodyX,e*68+bodyY,e*36,e*88);//neck
        
        //HEAD
        fill(255,224,189);//skin tone
        ellipse(e*75+bodyX,e*49+bodyY,e*53,e*52);//head Main
        arc(e*75+bodyX,e*62+bodyY,e*35,e*34,0,180);//chin
    };
    
    var drawGlasses = function(bodyX, bodyY, bodySize){
        var e = bodySize/100;
        
        //GLASSES
        stroke(0, 0, 0);//glasses color
        strokeWeight(e*1.2);//lens thickness
        rect(e*55+bodyX,e*49+bodyY,e*16,e*11,3);//left lens
        rect(e*75+bodyX,e*49+bodyY,e*16,e*11,3);//right lens
        strokeWeight(e*2.7);//wire thickness
        line(e*74+bodyX,e*54+bodyY,e*72+bodyX,e*54+bodyY);//nose thing
        line(e*56+bodyX,e*52+bodyY,e*52+bodyX,e*50+bodyY);//left wire
        line(e*92+bodyX,e*52+bodyY,e*99+bodyX,e*50+bodyY);//right wire
        noStroke();
    };
    
    var drawFace = function(bodyX, bodyY, bodySize){
        var e = bodySize/100;
        //NOSE
        stroke(0, 0, 0);
        strokeWeight(e*0.3);
        bezier(e*72+bodyX,e*60+bodyY,e*82+bodyX,e*60+bodyY,e*75+bodyX,e*67+bodyY,e*71+bodyX,e*64+bodyY);
        noStroke();
        
        //EYES
        fill(0, 40, 92);//eye color
        ellipse(e*64+bodyX,e*55+bodyY,e*6,e*7);//left eye
        ellipse(e*83+bodyX,e*55+bodyY,e*6,e*7);//right eye
        
        //MOUTH
        fill(255, 255, 255);
        stroke(138, 75, 75);//lips?
        strokeWeight(e*1);
        arc(e*74+bodyX,e*67+bodyY,e*17,e*9,0,180);//teeth
        noStroke();
    };
    
    var drawHat= function(bodyX, bodyY, bodySize){
        var e = bodySize/100;
        //HAT
        fill(74, 74, 63);//hat color
        arc(e*75+bodyX,e*35+bodyY,e*53,e*42, -180,0);//hat top
        fill(71,72,64);
        rect(e*49+bodyX,e*46+bodyY,e*53,e*-13);//hat brow
        quad(e*42+bodyX,e*81+bodyY,e*45+bodyX,e*40+bodyY,e*55+bodyX,e*27+bodyY,e*52+bodyX,e*86+bodyY);//hat flap left
        quad(e*106+bodyX,e*84+bodyY,e*103+bodyX,e*38+bodyY,e*93+bodyX,e*28+bodyY,e*97+bodyX,e*87+bodyY);//hat flap left
    };
    
    var drawHoodie = function(bodyX, bodyY, bodySize){
        var e = bodySize/100;
        //HOODIE
        fill(33,44,40);
        ellipse(e*75+bodyX,e*112+bodyY,e*80,e*45);//body
        rect(e*44+bodyX,e*127+bodyY,e*60,e*10);//body
        fill(33,44,40);
        quad(e*93+bodyX,e*77+bodyY,e*58+bodyX,e*98+bodyY,e*121+bodyX,e*98+bodyY,e*96+bodyX,e*83+bodyY);//right shoulder
        quad(e*52+bodyX,e*85+bodyY,e*28+bodyX,e*98+bodyY,e*81+bodyX,e*95+bodyY,e*57+bodyX,e*78+bodyY);//left shoulder
        arc(e*108+bodyX,e*139+bodyY,e*50,e*93,-120,5);//right arm
        arc(e*41+bodyX,e*139+bodyY,e*50,e*93,179,308);//left arm
        fill(0, 0, 0);
        triangle(e*63+bodyX,e*83+bodyY,e*72+bodyX,e*90+bodyY,e*86+bodyX,e*83+bodyY);//shirt
    };
    
    var drawInintials = function(bodyX, bodyY, bodySize){
        var e = bodySize/100;
        //LETTERING
        var font= createFont("cursive");
        fill(255, 255, 255);
        textFont(font, e*10);
        text("E. M.",e*72+bodyX,e*98+bodyY,e*33,e*48);
    
        //Reset lettering
        var font= createFont("sans-serif");
        textFont(font,15);
    
    };
        
        //Draw head
    var drawBitmojiHead = function(bodyX, bodyY, bodySize){
        drawHead(bodyX, bodyY, bodySize);
        drawGlasses(bodyX, bodyY, bodySize);
        drawFace(bodyX, bodyY, bodySize);
        drawHat(bodyX, bodyY, bodySize);
    };
        //Draw Body
    var drawBitmojiBody =function(bodyX, bodyY, bodySize){
        drawHoodie(bodyX, bodyY, bodySize);
        drawInintials(bodyX, bodyY, bodySize);
    };
        drawBitmojiHead(bodyX, bodyY, bodySize);
        drawBitmojiBody(bodyX, bodyY, bodySize);
};
var drawBitmojiAlabede = function(){
    fill(255, 255, 255); // fill for earring
    stroke(212,175,55); // earring color
    ellipse(64,127,30,30); // left earring
    ellipse(130,127,30,30); // right earring
    noStroke();
    fill(111,79,29); // fill to skin tone
    ellipse(100,100,70,86);  //head
    fill(255, 255, 255); // Under scarf color hijab
    ellipse(101,70,83,60);  // under scarf
    fill(11, 156, 16); //  Big scarf hijab color
    quad(23, 150, 63, 68, 87, 51, 54, 150); // left side hijab
    quad(165, 150, 134, 68, 113, 50, 135, 150); // right side hijab
    ellipse(99,68,72,42);  // top scarf
    stroke(0, 0, 0); // stroke to black for glasses
    fill(111,79,29); // fill to skin tone for glasses
    ellipse(85,112,18,15); // left glasses
    ellipse(112,112,18,15); // right glasses
    line(94,112,102,112); // glasses nose bridge
    line(137,103,120,115); // glasses side right
    line(75,111,63,102); // glasses side left
    fill(0, 0, 0); // black eyes fill
    ellipse(85,112,7,7); // left eye
    ellipse(112,112,7,7); // right eye
    fill(111,79,29); // fill to skin tone
    bezier(101,116,122,134,95,125,101,128); //nose
    fill(111,79,29); // fill to skin tone for lips
    arc(101, 135, 15, 11, 1, 180); // bottom lips
    arc(101, 135, 15, -11, 1, 180); // top lip
    line(94,135,108,135); // line in-between lips
    fill(0, 117, 4); // shirt color 
    rect(69, 143, 60, 53); // shirt
    fill(111,79,29); // fill to skin tone for shirt-indent
    triangle(90, 144, 114, 145, 102, 159); // shirt indent
    stroke(255, 255, 255); // letter initial color 
    line(77,184,82,165); // 1st letter line to the left
    line(88,184,82,165); // 2nd letter line to the left
    line(88,176,79,175); // connecting line left
    line(106,184,111,165); // 1st letter line to the right
    line(117,184,111,165); // 2nd letter line to the right
    line(117,175,109,175); // connecting line right
};

var scene = 0;

/*********
  BUTTON
 *********/
var button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.round = config.round || 0;
    this.label = config.label || "Click";
    this.color = config.color || color(255, 255, 255);
    this.onClick = config.onClick || function() {};
};

button.prototype.draw = function() {
    fill(this.color);
    rect(this.x, this.y, this.width, this.height, this.round);
    fill(255, 255, 255);
    textSize(23);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

//SplashScreen Button
var splashBtn = new button(
    {
     x: 70,
     y: 240,
     round: 28,
     label: "         Game Start",
     color: color(0, 191, 255, 90),
     width: 260,
     height: 49,
     onClick: function() {
         scene = 1;
     }
    }
);
//Settings Button
var settingsBtn = new button(
    {
     x: 70,
     y: 298,
     round: 28,
     label: "            Settings",
     color: color(0, 191, 255, 90),
     width: 260,
     height: 49,
     onClick: function() {
         scene = 2;
     }
    }
);

/**************
  KEY TRACKER
 ************/
//to use put Key[] inside of an if function. It will return  true if whatever inside of the brackets matches the code for the corresponding key or keyCode. 
//Code is based partially on Drew Bent's "Multiple Key Presses with Bounces" at https://www.khanacademy.org/computer-programming/multiple-key-presses/977647663. 

var keys = {}; 

var keyPressed = function() { 
  keys[key.code] = true;
  keys[keyCode] = true;
};
 
var keyReleased = function() { 
  keys[key.code] = false; 
  keys[keyCode] = false;
};

/***********
  SETTINGS
************/
//settings
var steeringType = "mouse";

/***********
    SCENES
************/
                        /**********************
                          SPLASHSCREEN(SCENE O)
                        ************************/
var scene1 = function(){
    background(0, 0, 0);
    
    fill(0, 168, 240, 200);
    textSize(15);
    text("By Everett Mitkowski and Alisha Alabede",67,216);
    textSize(46);
    text("SpaceShip",93,53);    //Couldn't think of a title
    drawBitmojiMitkowski(-2,100,72);
    
    splashBtn.draw();
    settingsBtn.draw();
    mouseClicked = function() {
        splashBtn.handleMouseClick();
        settingsBtn.handleMouseClick();
    };
    
};

                        /**********************
                          RUNNING GAME(SCENE 1)
                        ************************/
//Global Variables
var playerShipX = 200; 
var playerShipY = 200;
var playerShip_Accel_X = 0;
var playerShip_Accel_Y = 0;

var scene2 = function(){
    //Create Spaceship & follow mouse
    var follow = function (){
        
        //Distance of ship from Mouse. Total, Y-axis, X-axis. 
        var distance = sqrt(pow(mouseX-playerShipX,2)+pow(mouseY-playerShipY,2));//Total distance
        var distanceY = playerShipY-mouseY;// Distance of ship on the Y axis
        var distanceX = mouseX-playerShipX;// Distance of ship on the X axis
        
        /****************
         MOUSE STEERING
        ******************/
        var mouseControl = function(){
            var PlayerSpeed = 20; //higher = slower
            var PlayerAcceleration = 0.4;
            var PlayerFriction = 0.95; //higher = less Friction
            
                //Adjusts acceleration depending on distance from mouse
            //Acceleration controlls for X
            if(keyIsPressed && keys[32]){
                if (distanceX > 0){
                    playerShip_Accel_X = playerShip_Accel_X + (pow(abs(distanceX), (PlayerAcceleration))/PlayerSpeed);
                }
                else if (distanceX < 0){
                    playerShip_Accel_X = playerShip_Accel_X - (pow(abs(distanceX), (PlayerAcceleration))/PlayerSpeed);
                }
                //Acceleration controlls for Y
                if (distanceY > 0){
                    playerShip_Accel_Y = playerShip_Accel_Y - (pow(abs(distanceY), (PlayerAcceleration))/PlayerSpeed);
                }
                else if (distanceY < 0){
                    playerShip_Accel_Y = playerShip_Accel_Y + (pow(abs(distanceY), (PlayerAcceleration))/PlayerSpeed);
                }
            }
            
            //Deceleration
            playerShip_Accel_Y = playerShip_Accel_Y*PlayerFriction;
            playerShip_Accel_X = playerShip_Accel_X*PlayerFriction;
    
            
        };
        
        //set steering type to mouse
        if(steeringType === "mouse"){
        mouseControl();
        }
        
        //Movement
        playerShipY = playerShipY + playerShip_Accel_Y;
        playerShipX = playerShipX + playerShip_Accel_X;
        
        /****************
         SHIP PARAMETERS 
        ******************/
        
        //Change this For size
        var spaceSize = 45;
        var s = spaceSize/100;
        
        //calculates the angle between ship and mouse. Sets "angle" equal to this.
        var angle = (atan2(mouseY - playerShipY,mouseX-playerShipX));
        
        background(255, 255, 255);
        
        //Contains trainslation and rotation to matrix. This means anything outside of the matric is not effected by the angle nor the translation.
        pushMatrix();
            translate(playerShipX,playerShipY); //Changes X & Y
            rotate(angle);
            
            noStroke(); //SpaceShip
            fill(135, 135, 135);
            triangle(s*-20,s*20,s*-20,s*-20,s*35,s*0);
            
            resetMatrix();//Stops ellipse from being translated
            fill(0, 0, 0);
            ellipse(playerShipX,playerShipY,5,5);
            
        popMatrix();
        
        
        /*************
            DEBUG
        *************/
        // println("y:" + distanceY + "  x:" + distanceX + "  XY:" + round(distance));
        //println("y:" + playerShip_Accel_Y + "  x:" + playerShip_Accel_X);
    };

    follow();

};
                        /**********************
                          RUNNING GAME(SCENE 1)
                        ************************/
var scene3 = function(){
    background(0, 0, 0);
    fill(255, 0, 0);
    text("Controls are just space for thrust at the moment. Real settings (like mouse and key movemnt) in the future. For now this is mostly a placeholder",20,20,380,400);
};

/****************
    RUN GAME
*****************/
draw = function() {
    if (scene === 0){
        scene1();
    } 
    else if (scene === 1){
        scene2();
    }
    else if (scene === 2){
        scene3();
    }
};

